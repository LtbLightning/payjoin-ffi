

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_payjoin_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_payjoin_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_payjoin_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("payjoin_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_payjoin_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_payjoin_ffi_checksum_method_contextv1_process_response() != 62276:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_contextv2_process_response() != 16327:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_enrolled_extract_req() != 58529:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_enrolled_fallback_target() != 1788:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_enrolled_process_res() != 61918:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_enroller_extract_req() != 17758:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_enroller_process_res() != 22088:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_headers_get_map() != 7889:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_maybeinputsowned_check_inputs_not_owned() != 32509:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_maybeinputsseen_check_no_inputs_seen_before() != 28969:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_maybemixedinputscripts_check_no_mixed_input_scripts() != 20133:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_outputsunknown_identify_receiver_outputs() != 53964:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_is_output_substitution_disabled() != 59335:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_owned_vouts() != 33295:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_psbt() != 22051:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_utxos_to_be_locked() != 62799:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_non_witness_input() != 9161:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_witness_input() != 57615:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_finalize_proposal() != 32297:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_substitute_output_address() != 56103:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_try_preserving_privacy() != 3109:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_requestbuilder_always_disable_output_substitution() != 46341:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_non_incentivizing() != 38078:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_recommended() != 37649:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_with_additional_fee() != 28831:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_requestcontext_extract_v1() != 44537:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_requestcontext_extract_v2() != 35928:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_assume_interactive_receiver() != 30907:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_check_broadcast_suitability() != 26022:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_extract_tx_to_schedule_broadcast() != 54881:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uri_address() != 5138:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uri_amount() != 26669:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_url_as_string() != 36665:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_url_query() != 37864:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2maybeinputsowned_check_inputs_not_owned() != 11015:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2maybeinputsseen_check_no_inputs_seen_before() != 30579:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2maybemixedinputscripts_check_no_mixed_input_scripts() != 14841:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2outputsunknown_identify_receiver_outputs() != 31941:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_deserialize_res() != 21303:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_is_output_substitution_disabled() != 13037:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_owned_vouts() != 58943:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_psbt() != 17219:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_utxos_to_be_locked() != 8312:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_contribute_non_witness_input() != 8344:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_contribute_witness_input() != 9262:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_finalize_proposal() != 16888:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_substitute_output_address() != 20437:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_try_preserving_privacy() != 3228:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_assume_interactive_receiver() != 23782:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_check_broadcast_suitability() != 59984:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_extract_tx_to_schedule_broadcast() != 12585:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_enroller_from_directory_config() != 24309:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_headers_from_vec() != 55332:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_ohttpkeys_decode() != 43383:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_requestbuilder_from_psbt_and_uri() != 10227:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_uncheckedproposal_from_request() != 49662:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_uri_from_str() != 23502:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_url_from_str() != 58365:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_canbroadcast_callback() != 27867:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_isoutputknown_callback() != 1120:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_isscriptowned_callback() != 32829:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_processpartiallysignedtransaction_callback() != 50246:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU8,
)
class UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI8,
)
class UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU16,
)
class UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI16,
)
class UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU32,
)
class UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI32,
)
class UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU64,
)
class UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI64,
)
class UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF32,
)
class UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF64,
)
class UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructPointer,
)
class UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructRustBuffer,
)
class UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructVoid,
)
UNIFFI_CALLBACK_INTERFACE_CAN_BROADCAST_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_IS_OUTPUT_KNOWN_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_IS_SCRIPT_OWNED_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_PROCESS_PARTIALLY_SIGNED_TRANSACTION_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
class UniffiVTableCallbackInterfaceCanBroadcast(ctypes.Structure):
    _fields_ = [
        ("callback", UNIFFI_CALLBACK_INTERFACE_CAN_BROADCAST_METHOD0),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class UniffiVTableCallbackInterfaceIsOutputKnown(ctypes.Structure):
    _fields_ = [
        ("callback", UNIFFI_CALLBACK_INTERFACE_IS_OUTPUT_KNOWN_METHOD0),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class UniffiVTableCallbackInterfaceIsScriptOwned(ctypes.Structure):
    _fields_ = [
        ("callback", UNIFFI_CALLBACK_INTERFACE_IS_SCRIPT_OWNED_METHOD0),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class UniffiVTableCallbackInterfaceProcessPartiallySignedTransaction(ctypes.Structure):
    _fields_ = [
        ("callback", UNIFFI_CALLBACK_INTERFACE_PROCESS_PARTIALLY_SIGNED_TRANSACTION_METHOD0),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_payjoin_ffi_fn_clone_clientresponse.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_clientresponse.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_clientresponse.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_clientresponse.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_clone_contextv1.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_contextv1.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_contextv1.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_contextv1.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_contextv1_process_response.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_contextv1_process_response.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_contextv2.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_contextv2.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_contextv2.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_contextv2.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_contextv2_process_response.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_contextv2_process_response.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_enrolled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_enrolled.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_enrolled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_enrolled.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_extract_req.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_extract_req.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_fallback_target.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_fallback_target.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_process_res.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_process_res.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_enroller.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_enroller.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_enroller.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_enroller.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_enroller_from_directory_config.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_enroller_from_directory_config.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_enroller_extract_req.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_enroller_extract_req.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_enroller_process_res.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_enroller_process_res.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_headers.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_headers.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_headers.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_headers.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_headers_from_vec.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_headers_from_vec.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_headers_get_map.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_headers_get_map.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybeinputsowned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybeinputsowned.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_maybeinputsowned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_maybeinputsowned.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_maybeinputsowned_check_inputs_not_owned.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_maybeinputsowned_check_inputs_not_owned.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybeinputsseen.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybeinputsseen.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_maybeinputsseen.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_maybeinputsseen.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_maybeinputsseen_check_no_inputs_seen_before.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_maybeinputsseen_check_no_inputs_seen_before.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybemixedinputscripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybemixedinputscripts.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_maybemixedinputscripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_maybemixedinputscripts.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_maybemixedinputscripts_check_no_mixed_input_scripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_maybemixedinputscripts_check_no_mixed_input_scripts.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_ohttpkeys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_ohttpkeys.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_ohttpkeys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_ohttpkeys.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_ohttpkeys_decode.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_ohttpkeys_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_outputsunknown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_outputsunknown.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_outputsunknown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_outputsunknown.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_outputsunknown_identify_receiver_outputs.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_outputsunknown_identify_receiver_outputs.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_payjoinproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_payjoinproposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_payjoinproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_payjoinproposal.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_is_output_substitution_disabled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_is_output_substitution_disabled.restype = ctypes.c_int8
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_owned_vouts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_owned_vouts.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_psbt.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_psbt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_utxos_to_be_locked.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_utxos_to_be_locked.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_pjuri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_pjuri.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_pjuri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_pjuri.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_clone_provisionalproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_provisionalproposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_provisionalproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_provisionalproposal.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_non_witness_input.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_non_witness_input.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_witness_input.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_witness_input.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_finalize_proposal.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_finalize_proposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_substitute_output_address.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_substitute_output_address.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_try_preserving_privacy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_try_preserving_privacy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_requestbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_requestbuilder.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_requestbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_requestbuilder.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_requestbuilder_from_psbt_and_uri.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_requestbuilder_from_psbt_and_uri.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_always_disable_output_substitution.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_always_disable_output_substitution.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_non_incentivizing.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_non_incentivizing.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_recommended.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_recommended.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_with_additional_fee.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_with_additional_fee.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_requestcontext.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_requestcontext.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_requestcontext.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_requestcontext.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestcontext_extract_v1.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestcontext_extract_v1.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestcontext_extract_v2.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_requestcontext_extract_v2.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_uncheckedproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_uncheckedproposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_uncheckedproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_uncheckedproposal.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_uncheckedproposal_from_request.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_uncheckedproposal_from_request.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_assume_interactive_receiver.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_assume_interactive_receiver.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_check_broadcast_suitability.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_check_broadcast_suitability.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_extract_tx_to_schedule_broadcast.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_extract_tx_to_schedule_broadcast.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_uri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_uri.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_uri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_uri.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_uri_from_str.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_uri_from_str.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_uri_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_uri_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_uri_amount.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_uri_amount.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_url.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_url.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_url_from_str.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_constructor_url_from_str.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_url_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_url_as_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_url_query.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_url_query.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybeinputsowned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybeinputsowned.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybeinputsowned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybeinputsowned.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybeinputsowned_check_inputs_not_owned.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybeinputsowned_check_inputs_not_owned.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybeinputsseen.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybeinputsseen.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybeinputsseen.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybeinputsseen.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybeinputsseen_check_no_inputs_seen_before.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybeinputsseen_check_no_inputs_seen_before.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybemixedinputscripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybemixedinputscripts.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybemixedinputscripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybemixedinputscripts.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybemixedinputscripts_check_no_mixed_input_scripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybemixedinputscripts_check_no_mixed_input_scripts.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2outputsunknown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2outputsunknown.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2outputsunknown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2outputsunknown.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2outputsunknown_identify_receiver_outputs.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2outputsunknown_identify_receiver_outputs.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2payjoinproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2payjoinproposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2payjoinproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2payjoinproposal.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_deserialize_res.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_deserialize_res.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_is_output_substitution_disabled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_is_output_substitution_disabled.restype = ctypes.c_int8
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_owned_vouts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_owned_vouts.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_psbt.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_psbt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_utxos_to_be_locked.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_utxos_to_be_locked.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2provisionalproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2provisionalproposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2provisionalproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2provisionalproposal.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_contribute_non_witness_input.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_contribute_non_witness_input.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_contribute_witness_input.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_contribute_witness_input.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_finalize_proposal.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_finalize_proposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_substitute_output_address.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_substitute_output_address.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_try_preserving_privacy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_try_preserving_privacy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2uncheckedproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2uncheckedproposal.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2uncheckedproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_free_v2uncheckedproposal.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_assume_interactive_receiver.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_assume_interactive_receiver.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_check_broadcast_suitability.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_check_broadcast_suitability.restype = ctypes.c_void_p
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_extract_tx_to_schedule_broadcast.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_extract_tx_to_schedule_broadcast.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_canbroadcast.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceCanBroadcast),
)
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_canbroadcast.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_isoutputknown.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceIsOutputKnown),
)
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_isoutputknown.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_isscriptowned.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceIsScriptOwned),
)
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_isscriptowned.restype = None
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_processpartiallysignedtransaction.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceProcessPartiallySignedTransaction),
)
_UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_processpartiallysignedtransaction.restype = None
_UniffiLib.ffi_payjoin_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_payjoin_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_payjoin_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_payjoin_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payjoin_ffi_rust_future_free_void.restype = None
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payjoin_ffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_payjoin_ffi_checksum_method_contextv1_process_response.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_contextv1_process_response.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_contextv2_process_response.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_contextv2_process_response.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enrolled_extract_req.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enrolled_extract_req.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enrolled_fallback_target.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enrolled_fallback_target.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enrolled_process_res.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enrolled_process_res.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enroller_extract_req.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enroller_extract_req.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enroller_process_res.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_enroller_process_res.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_headers_get_map.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_headers_get_map.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_maybeinputsowned_check_inputs_not_owned.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_maybeinputsowned_check_inputs_not_owned.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_maybeinputsseen_check_no_inputs_seen_before.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_maybeinputsseen_check_no_inputs_seen_before.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_maybemixedinputscripts_check_no_mixed_input_scripts.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_maybemixedinputscripts_check_no_mixed_input_scripts.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_outputsunknown_identify_receiver_outputs.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_outputsunknown_identify_receiver_outputs.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_is_output_substitution_disabled.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_is_output_substitution_disabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_owned_vouts.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_owned_vouts.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_psbt.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_psbt.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_utxos_to_be_locked.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_utxos_to_be_locked.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_non_witness_input.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_non_witness_input.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_witness_input.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_witness_input.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_finalize_proposal.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_finalize_proposal.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_substitute_output_address.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_substitute_output_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_try_preserving_privacy.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_try_preserving_privacy.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_always_disable_output_substitution.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_always_disable_output_substitution.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_non_incentivizing.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_non_incentivizing.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_recommended.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_recommended.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_with_additional_fee.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestbuilder_build_with_additional_fee.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestcontext_extract_v1.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestcontext_extract_v1.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestcontext_extract_v2.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_requestcontext_extract_v2.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_assume_interactive_receiver.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_assume_interactive_receiver.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_check_broadcast_suitability.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_check_broadcast_suitability.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_extract_tx_to_schedule_broadcast.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_extract_tx_to_schedule_broadcast.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uri_address.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uri_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uri_amount.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_uri_amount.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_url_as_string.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_url_as_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_url_query.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_url_query.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2maybeinputsowned_check_inputs_not_owned.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2maybeinputsowned_check_inputs_not_owned.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2maybeinputsseen_check_no_inputs_seen_before.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2maybeinputsseen_check_no_inputs_seen_before.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2maybemixedinputscripts_check_no_mixed_input_scripts.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2maybemixedinputscripts_check_no_mixed_input_scripts.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2outputsunknown_identify_receiver_outputs.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2outputsunknown_identify_receiver_outputs.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_deserialize_res.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_deserialize_res.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_is_output_substitution_disabled.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_is_output_substitution_disabled.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_owned_vouts.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_owned_vouts.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_psbt.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_psbt.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_utxos_to_be_locked.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2payjoinproposal_utxos_to_be_locked.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_contribute_non_witness_input.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_contribute_non_witness_input.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_contribute_witness_input.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_contribute_witness_input.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_finalize_proposal.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_finalize_proposal.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_substitute_output_address.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_substitute_output_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_try_preserving_privacy.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2provisionalproposal_try_preserving_privacy.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_assume_interactive_receiver.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_assume_interactive_receiver.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_check_broadcast_suitability.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_check_broadcast_suitability.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_extract_tx_to_schedule_broadcast.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_v2uncheckedproposal_extract_tx_to_schedule_broadcast.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_enroller_from_directory_config.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_enroller_from_directory_config.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_headers_from_vec.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_headers_from_vec.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_ohttpkeys_decode.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_ohttpkeys_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_requestbuilder_from_psbt_and_uri.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_requestbuilder_from_psbt_and_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_uncheckedproposal_from_request.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_uncheckedproposal_from_request.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_uri_from_str.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_uri_from_str.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_url_from_str.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_constructor_url_from_str.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_canbroadcast_callback.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_canbroadcast_callback.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_isoutputknown_callback.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_isoutputknown_callback.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_isscriptowned_callback.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_isscriptowned_callback.restype = ctypes.c_uint16
_UniffiLib.uniffi_payjoin_ffi_checksum_method_processpartiallysignedtransaction_callback.argtypes = (
)
_UniffiLib.uniffi_payjoin_ffi_checksum_method_processpartiallysignedtransaction_callback.restype = ctypes.c_uint16
_UniffiLib.ffi_payjoin_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_payjoin_ffi_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class ClientResponseProtocol(typing.Protocol):
    pass


class ClientResponse:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_clientresponse, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_clientresponse, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst



class _UniffiConverterTypeClientResponse:

    @staticmethod
    def lift(value: int):
        return ClientResponse._make_instance_(value)

    @staticmethod
    def check_lower(value: ClientResponse):
        if not isinstance(value, ClientResponse):
            raise TypeError("Expected ClientResponse instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientResponseProtocol):
        if not isinstance(value, ClientResponse):
            raise TypeError("Expected ClientResponse instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientResponseProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ContextV1Protocol(typing.Protocol):
    def process_response(self, response: "typing.List[int]"):
        raise NotImplementedError


class ContextV1:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_contextv1, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_contextv1, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def process_response(self, response: "typing.List[int]") -> "str":
        _UniffiConverterSequenceUInt8.check_lower(response)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_contextv1_process_response,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(response))
        )






class _UniffiConverterTypeContextV1:

    @staticmethod
    def lift(value: int):
        return ContextV1._make_instance_(value)

    @staticmethod
    def check_lower(value: ContextV1):
        if not isinstance(value, ContextV1):
            raise TypeError("Expected ContextV1 instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ContextV1Protocol):
        if not isinstance(value, ContextV1):
            raise TypeError("Expected ContextV1 instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ContextV1Protocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ContextV2Protocol(typing.Protocol):
    def process_response(self, response: "typing.List[int]"):
        raise NotImplementedError


class ContextV2:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_contextv2, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_contextv2, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def process_response(self, response: "typing.List[int]") -> "typing.Optional[str]":
        _UniffiConverterSequenceUInt8.check_lower(response)
        
        return _UniffiConverterOptionalString.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_contextv2_process_response,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(response))
        )






class _UniffiConverterTypeContextV2:

    @staticmethod
    def lift(value: int):
        return ContextV2._make_instance_(value)

    @staticmethod
    def check_lower(value: ContextV2):
        if not isinstance(value, ContextV2):
            raise TypeError("Expected ContextV2 instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ContextV2Protocol):
        if not isinstance(value, ContextV2):
            raise TypeError("Expected ContextV2 instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ContextV2Protocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class EnrolledProtocol(typing.Protocol):
    def extract_req(self, ):
        raise NotImplementedError
    def fallback_target(self, ):
        raise NotImplementedError
    def process_res(self, body: "typing.List[int]",ctx: "ClientResponse"):
        raise NotImplementedError


class Enrolled:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_enrolled, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_enrolled, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def extract_req(self, ) -> "RequestResponse":
        return _UniffiConverterTypeRequestResponse.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_extract_req,self._uniffi_clone_pointer(),)
        )





    def fallback_target(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_fallback_target,self._uniffi_clone_pointer(),)
        )





    def process_res(self, body: "typing.List[int]",ctx: "ClientResponse") -> "typing.Optional[V2UncheckedProposal]":
        _UniffiConverterSequenceUInt8.check_lower(body)
        
        _UniffiConverterTypeClientResponse.check_lower(ctx)
        
        return _UniffiConverterOptionalTypeV2UncheckedProposal.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_enrolled_process_res,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(body),
        _UniffiConverterTypeClientResponse.lower(ctx))
        )






class _UniffiConverterTypeEnrolled:

    @staticmethod
    def lift(value: int):
        return Enrolled._make_instance_(value)

    @staticmethod
    def check_lower(value: Enrolled):
        if not isinstance(value, Enrolled):
            raise TypeError("Expected Enrolled instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: EnrolledProtocol):
        if not isinstance(value, Enrolled):
            raise TypeError("Expected Enrolled instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EnrolledProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class EnrollerProtocol(typing.Protocol):
    def extract_req(self, ):
        raise NotImplementedError
    def process_res(self, body: "typing.List[int]",ctx: "ClientResponse"):
        raise NotImplementedError


class Enroller:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_enroller, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_enroller, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_directory_config(cls, directory: "Url",ohttp_keys: "OhttpKeys",ohttp_relay: "Url"):
        _UniffiConverterTypeUrl.check_lower(directory)
        
        _UniffiConverterTypeOhttpKeys.check_lower(ohttp_keys)
        
        _UniffiConverterTypeUrl.check_lower(ohttp_relay)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_constructor_enroller_from_directory_config,
        _UniffiConverterTypeUrl.lower(directory),
        _UniffiConverterTypeOhttpKeys.lower(ohttp_keys),
        _UniffiConverterTypeUrl.lower(ohttp_relay))
        return cls._make_instance_(pointer)



    def extract_req(self, ) -> "RequestResponse":
        return _UniffiConverterTypeRequestResponse.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_enroller_extract_req,self._uniffi_clone_pointer(),)
        )





    def process_res(self, body: "typing.List[int]",ctx: "ClientResponse") -> "Enrolled":
        _UniffiConverterSequenceUInt8.check_lower(body)
        
        _UniffiConverterTypeClientResponse.check_lower(ctx)
        
        return _UniffiConverterTypeEnrolled.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_enroller_process_res,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(body),
        _UniffiConverterTypeClientResponse.lower(ctx))
        )






class _UniffiConverterTypeEnroller:

    @staticmethod
    def lift(value: int):
        return Enroller._make_instance_(value)

    @staticmethod
    def check_lower(value: Enroller):
        if not isinstance(value, Enroller):
            raise TypeError("Expected Enroller instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: EnrollerProtocol):
        if not isinstance(value, Enroller):
            raise TypeError("Expected Enroller instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EnrollerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class HeadersProtocol(typing.Protocol):
    def get_map(self, ):
        raise NotImplementedError


class Headers:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_headers, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_headers, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_vec(cls, body: "typing.List[int]"):
        _UniffiConverterSequenceUInt8.check_lower(body)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_constructor_headers_from_vec,
        _UniffiConverterSequenceUInt8.lower(body))
        return cls._make_instance_(pointer)



    def get_map(self, ) -> "dict[str, str]":
        return _UniffiConverterMapStringString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_headers_get_map,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeHeaders:

    @staticmethod
    def lift(value: int):
        return Headers._make_instance_(value)

    @staticmethod
    def check_lower(value: Headers):
        if not isinstance(value, Headers):
            raise TypeError("Expected Headers instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: HeadersProtocol):
        if not isinstance(value, Headers):
            raise TypeError("Expected Headers instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: HeadersProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class MaybeInputsOwnedProtocol(typing.Protocol):
    def check_inputs_not_owned(self, is_owned: "IsScriptOwned"):
        raise NotImplementedError


class MaybeInputsOwned:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_maybeinputsowned, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybeinputsowned, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_inputs_not_owned(self, is_owned: "IsScriptOwned") -> "MaybeMixedInputScripts":
        _UniffiConverterCallbackInterfaceIsScriptOwned.check_lower(is_owned)
        
        return _UniffiConverterTypeMaybeMixedInputScripts.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_maybeinputsowned_check_inputs_not_owned,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceIsScriptOwned.lower(is_owned))
        )






class _UniffiConverterTypeMaybeInputsOwned:

    @staticmethod
    def lift(value: int):
        return MaybeInputsOwned._make_instance_(value)

    @staticmethod
    def check_lower(value: MaybeInputsOwned):
        if not isinstance(value, MaybeInputsOwned):
            raise TypeError("Expected MaybeInputsOwned instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: MaybeInputsOwnedProtocol):
        if not isinstance(value, MaybeInputsOwned):
            raise TypeError("Expected MaybeInputsOwned instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MaybeInputsOwnedProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class MaybeInputsSeenProtocol(typing.Protocol):
    def check_no_inputs_seen_before(self, is_known: "IsOutputKnown"):
        raise NotImplementedError


class MaybeInputsSeen:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_maybeinputsseen, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybeinputsseen, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_no_inputs_seen_before(self, is_known: "IsOutputKnown") -> "OutputsUnknown":
        _UniffiConverterCallbackInterfaceIsOutputKnown.check_lower(is_known)
        
        return _UniffiConverterTypeOutputsUnknown.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_maybeinputsseen_check_no_inputs_seen_before,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceIsOutputKnown.lower(is_known))
        )






class _UniffiConverterTypeMaybeInputsSeen:

    @staticmethod
    def lift(value: int):
        return MaybeInputsSeen._make_instance_(value)

    @staticmethod
    def check_lower(value: MaybeInputsSeen):
        if not isinstance(value, MaybeInputsSeen):
            raise TypeError("Expected MaybeInputsSeen instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: MaybeInputsSeenProtocol):
        if not isinstance(value, MaybeInputsSeen):
            raise TypeError("Expected MaybeInputsSeen instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MaybeInputsSeenProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class MaybeMixedInputScriptsProtocol(typing.Protocol):
    def check_no_mixed_input_scripts(self, ):
        raise NotImplementedError


class MaybeMixedInputScripts:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_maybemixedinputscripts, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_maybemixedinputscripts, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_no_mixed_input_scripts(self, ) -> "MaybeInputsSeen":
        return _UniffiConverterTypeMaybeInputsSeen.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_maybemixedinputscripts_check_no_mixed_input_scripts,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeMaybeMixedInputScripts:

    @staticmethod
    def lift(value: int):
        return MaybeMixedInputScripts._make_instance_(value)

    @staticmethod
    def check_lower(value: MaybeMixedInputScripts):
        if not isinstance(value, MaybeMixedInputScripts):
            raise TypeError("Expected MaybeMixedInputScripts instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: MaybeMixedInputScriptsProtocol):
        if not isinstance(value, MaybeMixedInputScripts):
            raise TypeError("Expected MaybeMixedInputScripts instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: MaybeMixedInputScriptsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class OhttpKeysProtocol(typing.Protocol):
    pass


class OhttpKeys:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_ohttpkeys, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_ohttpkeys, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def decode(cls, bytes: "typing.List[int]"):
        _UniffiConverterSequenceUInt8.check_lower(bytes)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_constructor_ohttpkeys_decode,
        _UniffiConverterSequenceUInt8.lower(bytes))
        return cls._make_instance_(pointer)




class _UniffiConverterTypeOhttpKeys:

    @staticmethod
    def lift(value: int):
        return OhttpKeys._make_instance_(value)

    @staticmethod
    def check_lower(value: OhttpKeys):
        if not isinstance(value, OhttpKeys):
            raise TypeError("Expected OhttpKeys instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: OhttpKeysProtocol):
        if not isinstance(value, OhttpKeys):
            raise TypeError("Expected OhttpKeys instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OhttpKeysProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class OutputsUnknownProtocol(typing.Protocol):
    def identify_receiver_outputs(self, is_receiver_output: "IsScriptOwned"):
        raise NotImplementedError


class OutputsUnknown:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_outputsunknown, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_outputsunknown, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def identify_receiver_outputs(self, is_receiver_output: "IsScriptOwned") -> "ProvisionalProposal":
        _UniffiConverterCallbackInterfaceIsScriptOwned.check_lower(is_receiver_output)
        
        return _UniffiConverterTypeProvisionalProposal.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_outputsunknown_identify_receiver_outputs,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceIsScriptOwned.lower(is_receiver_output))
        )






class _UniffiConverterTypeOutputsUnknown:

    @staticmethod
    def lift(value: int):
        return OutputsUnknown._make_instance_(value)

    @staticmethod
    def check_lower(value: OutputsUnknown):
        if not isinstance(value, OutputsUnknown):
            raise TypeError("Expected OutputsUnknown instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: OutputsUnknownProtocol):
        if not isinstance(value, OutputsUnknown):
            raise TypeError("Expected OutputsUnknown instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OutputsUnknownProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class PayjoinProposalProtocol(typing.Protocol):
    def is_output_substitution_disabled(self, ):
        raise NotImplementedError
    def owned_vouts(self, ):
        raise NotImplementedError
    def psbt(self, ):
        raise NotImplementedError
    def utxos_to_be_locked(self, ):
        raise NotImplementedError


class PayjoinProposal:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_payjoinproposal, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_payjoinproposal, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def is_output_substitution_disabled(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_is_output_substitution_disabled,self._uniffi_clone_pointer(),)
        )





    def owned_vouts(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt64.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_owned_vouts,self._uniffi_clone_pointer(),)
        )





    def psbt(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_psbt,self._uniffi_clone_pointer(),)
        )





    def utxos_to_be_locked(self, ) -> "typing.List[OutPoint]":
        return _UniffiConverterSequenceTypeOutPoint.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_payjoinproposal_utxos_to_be_locked,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypePayjoinProposal:

    @staticmethod
    def lift(value: int):
        return PayjoinProposal._make_instance_(value)

    @staticmethod
    def check_lower(value: PayjoinProposal):
        if not isinstance(value, PayjoinProposal):
            raise TypeError("Expected PayjoinProposal instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: PayjoinProposalProtocol):
        if not isinstance(value, PayjoinProposal):
            raise TypeError("Expected PayjoinProposal instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PayjoinProposalProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class PjUriProtocol(typing.Protocol):
    pass


class PjUri:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_pjuri, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_pjuri, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst



class _UniffiConverterTypePjUri:

    @staticmethod
    def lift(value: int):
        return PjUri._make_instance_(value)

    @staticmethod
    def check_lower(value: PjUri):
        if not isinstance(value, PjUri):
            raise TypeError("Expected PjUri instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: PjUriProtocol):
        if not isinstance(value, PjUri):
            raise TypeError("Expected PjUri instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PjUriProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ProvisionalProposalProtocol(typing.Protocol):
    def contribute_non_witness_input(self, tx: "typing.List[int]",outpoint: "OutPoint"):
        raise NotImplementedError
    def contribute_witness_input(self, txout: "TxOut",outpoint: "OutPoint"):
        raise NotImplementedError
    def finalize_proposal(self, process_psbt: "ProcessPartiallySignedTransaction",min_feerate_sat_per_vb: "typing.Optional[int]"):
        raise NotImplementedError
    def substitute_output_address(self, substitute_address: "str"):
        raise NotImplementedError
    def try_preserving_privacy(self, candidate_inputs: "dict[int, OutPoint]"):
        raise NotImplementedError


class ProvisionalProposal:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_provisionalproposal, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_provisionalproposal, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def contribute_non_witness_input(self, tx: "typing.List[int]",outpoint: "OutPoint") -> None:
        _UniffiConverterSequenceUInt8.check_lower(tx)
        
        _UniffiConverterTypeOutPoint.check_lower(outpoint)
        
        _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_non_witness_input,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(tx),
        _UniffiConverterTypeOutPoint.lower(outpoint))






    def contribute_witness_input(self, txout: "TxOut",outpoint: "OutPoint") -> None:
        _UniffiConverterTypeTxOut.check_lower(txout)
        
        _UniffiConverterTypeOutPoint.check_lower(outpoint)
        
        _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_witness_input,self._uniffi_clone_pointer(),
        _UniffiConverterTypeTxOut.lower(txout),
        _UniffiConverterTypeOutPoint.lower(outpoint))






    def finalize_proposal(self, process_psbt: "ProcessPartiallySignedTransaction",min_feerate_sat_per_vb: "typing.Optional[int]") -> "PayjoinProposal":
        _UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction.check_lower(process_psbt)
        
        _UniffiConverterOptionalUInt64.check_lower(min_feerate_sat_per_vb)
        
        return _UniffiConverterTypePayjoinProposal.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_finalize_proposal,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction.lower(process_psbt),
        _UniffiConverterOptionalUInt64.lower(min_feerate_sat_per_vb))
        )





    def substitute_output_address(self, substitute_address: "str") -> None:
        _UniffiConverterString.check_lower(substitute_address)
        
        _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_substitute_output_address,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(substitute_address))






    def try_preserving_privacy(self, candidate_inputs: "dict[int, OutPoint]") -> "OutPoint":
        _UniffiConverterMapUInt64TypeOutPoint.check_lower(candidate_inputs)
        
        return _UniffiConverterTypeOutPoint.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_provisionalproposal_try_preserving_privacy,self._uniffi_clone_pointer(),
        _UniffiConverterMapUInt64TypeOutPoint.lower(candidate_inputs))
        )






class _UniffiConverterTypeProvisionalProposal:

    @staticmethod
    def lift(value: int):
        return ProvisionalProposal._make_instance_(value)

    @staticmethod
    def check_lower(value: ProvisionalProposal):
        if not isinstance(value, ProvisionalProposal):
            raise TypeError("Expected ProvisionalProposal instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ProvisionalProposalProtocol):
        if not isinstance(value, ProvisionalProposal):
            raise TypeError("Expected ProvisionalProposal instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ProvisionalProposalProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RequestBuilderProtocol(typing.Protocol):
    def always_disable_output_substitution(self, disable: "bool"):
        raise NotImplementedError
    def build_non_incentivizing(self, ):
        raise NotImplementedError
    def build_recommended(self, min_fee_rate: "int"):
        raise NotImplementedError
    def build_with_additional_fee(self, max_fee_contribution: "int",change_index: "typing.Optional[int]",min_fee_rate: "int",clamp_fee_contribution: "bool"):
        raise NotImplementedError


class RequestBuilder:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_requestbuilder, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_requestbuilder, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_psbt_and_uri(cls, psbt: "str",uri: "Uri"):
        _UniffiConverterString.check_lower(psbt)
        
        _UniffiConverterTypeUri.check_lower(uri)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_constructor_requestbuilder_from_psbt_and_uri,
        _UniffiConverterString.lower(psbt),
        _UniffiConverterTypeUri.lower(uri))
        return cls._make_instance_(pointer)



    def always_disable_output_substitution(self, disable: "bool") -> "RequestBuilder":
        _UniffiConverterBool.check_lower(disable)
        
        return _UniffiConverterTypeRequestBuilder.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_always_disable_output_substitution,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(disable))
        )





    def build_non_incentivizing(self, ) -> "RequestContext":
        return _UniffiConverterTypeRequestContext.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_non_incentivizing,self._uniffi_clone_pointer(),)
        )





    def build_recommended(self, min_fee_rate: "int") -> "RequestContext":
        _UniffiConverterUInt64.check_lower(min_fee_rate)
        
        return _UniffiConverterTypeRequestContext.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_recommended,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(min_fee_rate))
        )





    def build_with_additional_fee(self, max_fee_contribution: "int",change_index: "typing.Optional[int]",min_fee_rate: "int",clamp_fee_contribution: "bool") -> "RequestContext":
        _UniffiConverterUInt64.check_lower(max_fee_contribution)
        
        _UniffiConverterOptionalUInt8.check_lower(change_index)
        
        _UniffiConverterUInt64.check_lower(min_fee_rate)
        
        _UniffiConverterBool.check_lower(clamp_fee_contribution)
        
        return _UniffiConverterTypeRequestContext.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_requestbuilder_build_with_additional_fee,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(max_fee_contribution),
        _UniffiConverterOptionalUInt8.lower(change_index),
        _UniffiConverterUInt64.lower(min_fee_rate),
        _UniffiConverterBool.lower(clamp_fee_contribution))
        )






class _UniffiConverterTypeRequestBuilder:

    @staticmethod
    def lift(value: int):
        return RequestBuilder._make_instance_(value)

    @staticmethod
    def check_lower(value: RequestBuilder):
        if not isinstance(value, RequestBuilder):
            raise TypeError("Expected RequestBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RequestBuilderProtocol):
        if not isinstance(value, RequestBuilder):
            raise TypeError("Expected RequestBuilder instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RequestBuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RequestContextProtocol(typing.Protocol):
    def extract_v1(self, ):
        raise NotImplementedError
    def extract_v2(self, ohttp_proxy_url: "Url"):
        raise NotImplementedError


class RequestContext:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_requestcontext, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_requestcontext, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def extract_v1(self, ) -> "RequestContextV1":
        return _UniffiConverterTypeRequestContextV1.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_requestcontext_extract_v1,self._uniffi_clone_pointer(),)
        )





    def extract_v2(self, ohttp_proxy_url: "Url") -> "RequestContextV2":
        _UniffiConverterTypeUrl.check_lower(ohttp_proxy_url)
        
        return _UniffiConverterTypeRequestContextV2.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_requestcontext_extract_v2,self._uniffi_clone_pointer(),
        _UniffiConverterTypeUrl.lower(ohttp_proxy_url))
        )






class _UniffiConverterTypeRequestContext:

    @staticmethod
    def lift(value: int):
        return RequestContext._make_instance_(value)

    @staticmethod
    def check_lower(value: RequestContext):
        if not isinstance(value, RequestContext):
            raise TypeError("Expected RequestContext instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RequestContextProtocol):
        if not isinstance(value, RequestContext):
            raise TypeError("Expected RequestContext instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RequestContextProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class UncheckedProposalProtocol(typing.Protocol):
    def assume_interactive_receiver(self, ):
        raise NotImplementedError
    def check_broadcast_suitability(self, min_fee_rate: "typing.Optional[int]",can_broadcast: "CanBroadcast"):
        raise NotImplementedError
    def extract_tx_to_schedule_broadcast(self, ):
        raise NotImplementedError


class UncheckedProposal:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_uncheckedproposal, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_uncheckedproposal, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_request(cls, body: "typing.List[int]",query: "str",headers: "Headers"):
        _UniffiConverterSequenceUInt8.check_lower(body)
        
        _UniffiConverterString.check_lower(query)
        
        _UniffiConverterTypeHeaders.check_lower(headers)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_constructor_uncheckedproposal_from_request,
        _UniffiConverterSequenceUInt8.lower(body),
        _UniffiConverterString.lower(query),
        _UniffiConverterTypeHeaders.lower(headers))
        return cls._make_instance_(pointer)



    def assume_interactive_receiver(self, ) -> "MaybeInputsOwned":
        return _UniffiConverterTypeMaybeInputsOwned.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_assume_interactive_receiver,self._uniffi_clone_pointer(),)
        )





    def check_broadcast_suitability(self, min_fee_rate: "typing.Optional[int]",can_broadcast: "CanBroadcast") -> "MaybeInputsOwned":
        _UniffiConverterOptionalUInt64.check_lower(min_fee_rate)
        
        _UniffiConverterCallbackInterfaceCanBroadcast.check_lower(can_broadcast)
        
        return _UniffiConverterTypeMaybeInputsOwned.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_check_broadcast_suitability,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt64.lower(min_fee_rate),
        _UniffiConverterCallbackInterfaceCanBroadcast.lower(can_broadcast))
        )





    def extract_tx_to_schedule_broadcast(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_extract_tx_to_schedule_broadcast,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeUncheckedProposal:

    @staticmethod
    def lift(value: int):
        return UncheckedProposal._make_instance_(value)

    @staticmethod
    def check_lower(value: UncheckedProposal):
        if not isinstance(value, UncheckedProposal):
            raise TypeError("Expected UncheckedProposal instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: UncheckedProposalProtocol):
        if not isinstance(value, UncheckedProposal):
            raise TypeError("Expected UncheckedProposal instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: UncheckedProposalProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class UriProtocol(typing.Protocol):
    def address(self, ):
        raise NotImplementedError
    def amount(self, ):
        raise NotImplementedError


class Uri:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_uri, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_uri, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_str(cls, uri: "str"):
        _UniffiConverterString.check_lower(uri)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_constructor_uri_from_str,
        _UniffiConverterString.lower(uri))
        return cls._make_instance_(pointer)



    def address(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_uri_address,self._uniffi_clone_pointer(),)
        )





    def amount(self, ) -> "typing.Optional[float]":
        return _UniffiConverterOptionalDouble.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_uri_amount,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeUri:

    @staticmethod
    def lift(value: int):
        return Uri._make_instance_(value)

    @staticmethod
    def check_lower(value: Uri):
        if not isinstance(value, Uri):
            raise TypeError("Expected Uri instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: UriProtocol):
        if not isinstance(value, Uri):
            raise TypeError("Expected Uri instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: UriProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class UrlProtocol(typing.Protocol):
    def as_string(self, ):
        raise NotImplementedError
    def query(self, ):
        raise NotImplementedError


class Url:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_url, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_url, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_str(cls, input: "str"):
        _UniffiConverterString.check_lower(input)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_constructor_url_from_str,
        _UniffiConverterString.lower(input))
        return cls._make_instance_(pointer)



    def as_string(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_url_as_string,self._uniffi_clone_pointer(),)
        )





    def query(self, ) -> "typing.Optional[str]":
        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_url_query,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeUrl:

    @staticmethod
    def lift(value: int):
        return Url._make_instance_(value)

    @staticmethod
    def check_lower(value: Url):
        if not isinstance(value, Url):
            raise TypeError("Expected Url instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: UrlProtocol):
        if not isinstance(value, Url):
            raise TypeError("Expected Url instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: UrlProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2MaybeInputsOwnedProtocol(typing.Protocol):
    def check_inputs_not_owned(self, is_owned: "IsScriptOwned"):
        raise NotImplementedError


class V2MaybeInputsOwned:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybeinputsowned, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybeinputsowned, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_inputs_not_owned(self, is_owned: "IsScriptOwned") -> "V2MaybeMixedInputScripts":
        _UniffiConverterCallbackInterfaceIsScriptOwned.check_lower(is_owned)
        
        return _UniffiConverterTypeV2MaybeMixedInputScripts.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybeinputsowned_check_inputs_not_owned,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceIsScriptOwned.lower(is_owned))
        )






class _UniffiConverterTypeV2MaybeInputsOwned:

    @staticmethod
    def lift(value: int):
        return V2MaybeInputsOwned._make_instance_(value)

    @staticmethod
    def check_lower(value: V2MaybeInputsOwned):
        if not isinstance(value, V2MaybeInputsOwned):
            raise TypeError("Expected V2MaybeInputsOwned instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2MaybeInputsOwnedProtocol):
        if not isinstance(value, V2MaybeInputsOwned):
            raise TypeError("Expected V2MaybeInputsOwned instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2MaybeInputsOwnedProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2MaybeInputsSeenProtocol(typing.Protocol):
    def check_no_inputs_seen_before(self, is_known: "IsOutputKnown"):
        raise NotImplementedError


class V2MaybeInputsSeen:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybeinputsseen, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybeinputsseen, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_no_inputs_seen_before(self, is_known: "IsOutputKnown") -> "V2OutputsUnknown":
        _UniffiConverterCallbackInterfaceIsOutputKnown.check_lower(is_known)
        
        return _UniffiConverterTypeV2OutputsUnknown.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybeinputsseen_check_no_inputs_seen_before,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceIsOutputKnown.lower(is_known))
        )






class _UniffiConverterTypeV2MaybeInputsSeen:

    @staticmethod
    def lift(value: int):
        return V2MaybeInputsSeen._make_instance_(value)

    @staticmethod
    def check_lower(value: V2MaybeInputsSeen):
        if not isinstance(value, V2MaybeInputsSeen):
            raise TypeError("Expected V2MaybeInputsSeen instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2MaybeInputsSeenProtocol):
        if not isinstance(value, V2MaybeInputsSeen):
            raise TypeError("Expected V2MaybeInputsSeen instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2MaybeInputsSeenProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2MaybeMixedInputScriptsProtocol(typing.Protocol):
    def check_no_mixed_input_scripts(self, ):
        raise NotImplementedError


class V2MaybeMixedInputScripts:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2maybemixedinputscripts, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2maybemixedinputscripts, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_no_mixed_input_scripts(self, ) -> "V2MaybeInputsSeen":
        return _UniffiConverterTypeV2MaybeInputsSeen.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2maybemixedinputscripts_check_no_mixed_input_scripts,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeV2MaybeMixedInputScripts:

    @staticmethod
    def lift(value: int):
        return V2MaybeMixedInputScripts._make_instance_(value)

    @staticmethod
    def check_lower(value: V2MaybeMixedInputScripts):
        if not isinstance(value, V2MaybeMixedInputScripts):
            raise TypeError("Expected V2MaybeMixedInputScripts instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2MaybeMixedInputScriptsProtocol):
        if not isinstance(value, V2MaybeMixedInputScripts):
            raise TypeError("Expected V2MaybeMixedInputScripts instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2MaybeMixedInputScriptsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2OutputsUnknownProtocol(typing.Protocol):
    def identify_receiver_outputs(self, is_receiver_output: "IsScriptOwned"):
        raise NotImplementedError


class V2OutputsUnknown:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2outputsunknown, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2outputsunknown, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def identify_receiver_outputs(self, is_receiver_output: "IsScriptOwned") -> "V2ProvisionalProposal":
        _UniffiConverterCallbackInterfaceIsScriptOwned.check_lower(is_receiver_output)
        
        return _UniffiConverterTypeV2ProvisionalProposal.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2outputsunknown_identify_receiver_outputs,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceIsScriptOwned.lower(is_receiver_output))
        )






class _UniffiConverterTypeV2OutputsUnknown:

    @staticmethod
    def lift(value: int):
        return V2OutputsUnknown._make_instance_(value)

    @staticmethod
    def check_lower(value: V2OutputsUnknown):
        if not isinstance(value, V2OutputsUnknown):
            raise TypeError("Expected V2OutputsUnknown instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2OutputsUnknownProtocol):
        if not isinstance(value, V2OutputsUnknown):
            raise TypeError("Expected V2OutputsUnknown instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2OutputsUnknownProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2PayjoinProposalProtocol(typing.Protocol):
    def deserialize_res(self, res: "typing.List[int]",ohttp_context: "ClientResponse"):
        raise NotImplementedError
    def is_output_substitution_disabled(self, ):
        raise NotImplementedError
    def owned_vouts(self, ):
        raise NotImplementedError
    def psbt(self, ):
        raise NotImplementedError
    def utxos_to_be_locked(self, ):
        raise NotImplementedError


class V2PayjoinProposal:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2payjoinproposal, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2payjoinproposal, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def deserialize_res(self, res: "typing.List[int]",ohttp_context: "ClientResponse") -> "typing.List[int]":
        _UniffiConverterSequenceUInt8.check_lower(res)
        
        _UniffiConverterTypeClientResponse.check_lower(ohttp_context)
        
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_deserialize_res,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(res),
        _UniffiConverterTypeClientResponse.lower(ohttp_context))
        )





    def is_output_substitution_disabled(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_is_output_substitution_disabled,self._uniffi_clone_pointer(),)
        )





    def owned_vouts(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt64.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_owned_vouts,self._uniffi_clone_pointer(),)
        )





    def psbt(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_psbt,self._uniffi_clone_pointer(),)
        )





    def utxos_to_be_locked(self, ) -> "typing.List[OutPoint]":
        return _UniffiConverterSequenceTypeOutPoint.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_v2payjoinproposal_utxos_to_be_locked,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeV2PayjoinProposal:

    @staticmethod
    def lift(value: int):
        return V2PayjoinProposal._make_instance_(value)

    @staticmethod
    def check_lower(value: V2PayjoinProposal):
        if not isinstance(value, V2PayjoinProposal):
            raise TypeError("Expected V2PayjoinProposal instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2PayjoinProposalProtocol):
        if not isinstance(value, V2PayjoinProposal):
            raise TypeError("Expected V2PayjoinProposal instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2PayjoinProposalProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2ProvisionalProposalProtocol(typing.Protocol):
    def contribute_non_witness_input(self, tx: "typing.List[int]",outpoint: "OutPoint"):
        raise NotImplementedError
    def contribute_witness_input(self, txout: "TxOut",outpoint: "OutPoint"):
        raise NotImplementedError
    def finalize_proposal(self, process_psbt: "ProcessPartiallySignedTransaction",min_feerate_sat_per_vb: "typing.Optional[int]"):
        raise NotImplementedError
    def substitute_output_address(self, substitute_address: "str"):
        raise NotImplementedError
    def try_preserving_privacy(self, candidate_inputs: "dict[int, OutPoint]"):
        raise NotImplementedError


class V2ProvisionalProposal:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2provisionalproposal, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2provisionalproposal, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def contribute_non_witness_input(self, tx: "typing.List[int]",outpoint: "OutPoint") -> None:
        _UniffiConverterSequenceUInt8.check_lower(tx)
        
        _UniffiConverterTypeOutPoint.check_lower(outpoint)
        
        _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_contribute_non_witness_input,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceUInt8.lower(tx),
        _UniffiConverterTypeOutPoint.lower(outpoint))






    def contribute_witness_input(self, txout: "TxOut",outpoint: "OutPoint") -> None:
        _UniffiConverterTypeTxOut.check_lower(txout)
        
        _UniffiConverterTypeOutPoint.check_lower(outpoint)
        
        _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_contribute_witness_input,self._uniffi_clone_pointer(),
        _UniffiConverterTypeTxOut.lower(txout),
        _UniffiConverterTypeOutPoint.lower(outpoint))






    def finalize_proposal(self, process_psbt: "ProcessPartiallySignedTransaction",min_feerate_sat_per_vb: "typing.Optional[int]") -> "V2PayjoinProposal":
        _UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction.check_lower(process_psbt)
        
        _UniffiConverterOptionalUInt64.check_lower(min_feerate_sat_per_vb)
        
        return _UniffiConverterTypeV2PayjoinProposal.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_finalize_proposal,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction.lower(process_psbt),
        _UniffiConverterOptionalUInt64.lower(min_feerate_sat_per_vb))
        )





    def substitute_output_address(self, substitute_address: "str") -> None:
        _UniffiConverterString.check_lower(substitute_address)
        
        _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_substitute_output_address,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(substitute_address))






    def try_preserving_privacy(self, candidate_inputs: "dict[int, OutPoint]") -> "OutPoint":
        _UniffiConverterMapUInt64TypeOutPoint.check_lower(candidate_inputs)
        
        return _UniffiConverterTypeOutPoint.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2provisionalproposal_try_preserving_privacy,self._uniffi_clone_pointer(),
        _UniffiConverterMapUInt64TypeOutPoint.lower(candidate_inputs))
        )






class _UniffiConverterTypeV2ProvisionalProposal:

    @staticmethod
    def lift(value: int):
        return V2ProvisionalProposal._make_instance_(value)

    @staticmethod
    def check_lower(value: V2ProvisionalProposal):
        if not isinstance(value, V2ProvisionalProposal):
            raise TypeError("Expected V2ProvisionalProposal instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2ProvisionalProposalProtocol):
        if not isinstance(value, V2ProvisionalProposal):
            raise TypeError("Expected V2ProvisionalProposal instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2ProvisionalProposalProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class V2UncheckedProposalProtocol(typing.Protocol):
    def assume_interactive_receiver(self, ):
        raise NotImplementedError
    def check_broadcast_suitability(self, min_fee_rate: "typing.Optional[int]",can_broadcast: "CanBroadcast"):
        raise NotImplementedError
    def extract_tx_to_schedule_broadcast(self, ):
        raise NotImplementedError


class V2UncheckedProposal:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_free_v2uncheckedproposal, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_clone_v2uncheckedproposal, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def assume_interactive_receiver(self, ) -> "V2MaybeInputsOwned":
        return _UniffiConverterTypeV2MaybeInputsOwned.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_assume_interactive_receiver,self._uniffi_clone_pointer(),)
        )





    def check_broadcast_suitability(self, min_fee_rate: "typing.Optional[int]",can_broadcast: "CanBroadcast") -> "V2MaybeInputsOwned":
        _UniffiConverterOptionalUInt64.check_lower(min_fee_rate)
        
        _UniffiConverterCallbackInterfaceCanBroadcast.check_lower(can_broadcast)
        
        return _UniffiConverterTypeV2MaybeInputsOwned.lift(
            _rust_call_with_error(_UniffiConverterTypePayjoinError,_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_check_broadcast_suitability,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt64.lower(min_fee_rate),
        _UniffiConverterCallbackInterfaceCanBroadcast.lower(can_broadcast))
        )





    def extract_tx_to_schedule_broadcast(self, ) -> "typing.List[int]":
        return _UniffiConverterSequenceUInt8.lift(
            _rust_call(_UniffiLib.uniffi_payjoin_ffi_fn_method_v2uncheckedproposal_extract_tx_to_schedule_broadcast,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeV2UncheckedProposal:

    @staticmethod
    def lift(value: int):
        return V2UncheckedProposal._make_instance_(value)

    @staticmethod
    def check_lower(value: V2UncheckedProposal):
        if not isinstance(value, V2UncheckedProposal):
            raise TypeError("Expected V2UncheckedProposal instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: V2UncheckedProposalProtocol):
        if not isinstance(value, V2UncheckedProposal):
            raise TypeError("Expected V2UncheckedProposal instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: V2UncheckedProposalProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class OutPoint:
    txid: "str"
    vout: "int"
    @typing.no_type_check
    def __init__(self, *, txid: "str", vout: "int"):
        self.txid = txid
        self.vout = vout

    def __str__(self):
        return "OutPoint(txid={}, vout={})".format(self.txid, self.vout)

    def __eq__(self, other):
        if self.txid != other.txid:
            return False
        if self.vout != other.vout:
            return False
        return True

class _UniffiConverterTypeOutPoint(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return OutPoint(
            txid=_UniffiConverterString.read(buf),
            vout=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.txid)
        _UniffiConverterUInt32.check_lower(value.vout)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.txid, buf)
        _UniffiConverterUInt32.write(value.vout, buf)


class Request:
    url: "Url"
    body: "typing.List[int]"
    @typing.no_type_check
    def __init__(self, *, url: "Url", body: "typing.List[int]"):
        self.url = url
        self.body = body

    def __str__(self):
        return "Request(url={}, body={})".format(self.url, self.body)

    def __eq__(self, other):
        if self.url != other.url:
            return False
        if self.body != other.body:
            return False
        return True

class _UniffiConverterTypeRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Request(
            url=_UniffiConverterTypeUrl.read(buf),
            body=_UniffiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeUrl.check_lower(value.url)
        _UniffiConverterSequenceUInt8.check_lower(value.body)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeUrl.write(value.url, buf)
        _UniffiConverterSequenceUInt8.write(value.body, buf)


class RequestContextV1:
    request: "Request"
    context_v1: "ContextV1"
    @typing.no_type_check
    def __init__(self, *, request: "Request", context_v1: "ContextV1"):
        self.request = request
        self.context_v1 = context_v1

    def __str__(self):
        return "RequestContextV1(request={}, context_v1={})".format(self.request, self.context_v1)

    def __eq__(self, other):
        if self.request != other.request:
            return False
        if self.context_v1 != other.context_v1:
            return False
        return True

class _UniffiConverterTypeRequestContextV1(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RequestContextV1(
            request=_UniffiConverterTypeRequest.read(buf),
            context_v1=_UniffiConverterTypeContextV1.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeRequest.check_lower(value.request)
        _UniffiConverterTypeContextV1.check_lower(value.context_v1)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeRequest.write(value.request, buf)
        _UniffiConverterTypeContextV1.write(value.context_v1, buf)


class RequestContextV2:
    request: "Request"
    context_v2: "ContextV2"
    @typing.no_type_check
    def __init__(self, *, request: "Request", context_v2: "ContextV2"):
        self.request = request
        self.context_v2 = context_v2

    def __str__(self):
        return "RequestContextV2(request={}, context_v2={})".format(self.request, self.context_v2)

    def __eq__(self, other):
        if self.request != other.request:
            return False
        if self.context_v2 != other.context_v2:
            return False
        return True

class _UniffiConverterTypeRequestContextV2(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RequestContextV2(
            request=_UniffiConverterTypeRequest.read(buf),
            context_v2=_UniffiConverterTypeContextV2.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeRequest.check_lower(value.request)
        _UniffiConverterTypeContextV2.check_lower(value.context_v2)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeRequest.write(value.request, buf)
        _UniffiConverterTypeContextV2.write(value.context_v2, buf)


class RequestResponse:
    request: "Request"
    client_response: "ClientResponse"
    @typing.no_type_check
    def __init__(self, *, request: "Request", client_response: "ClientResponse"):
        self.request = request
        self.client_response = client_response

    def __str__(self):
        return "RequestResponse(request={}, client_response={})".format(self.request, self.client_response)

    def __eq__(self, other):
        if self.request != other.request:
            return False
        if self.client_response != other.client_response:
            return False
        return True

class _UniffiConverterTypeRequestResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RequestResponse(
            request=_UniffiConverterTypeRequest.read(buf),
            client_response=_UniffiConverterTypeClientResponse.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeRequest.check_lower(value.request)
        _UniffiConverterTypeClientResponse.check_lower(value.client_response)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeRequest.write(value.request, buf)
        _UniffiConverterTypeClientResponse.write(value.client_response, buf)


class TxOut:
    value: "int"
    script_pubkey: "typing.List[int]"
    @typing.no_type_check
    def __init__(self, *, value: "int", script_pubkey: "typing.List[int]"):
        self.value = value
        self.script_pubkey = script_pubkey

    def __str__(self):
        return "TxOut(value={}, script_pubkey={})".format(self.value, self.script_pubkey)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        if self.script_pubkey != other.script_pubkey:
            return False
        return True

class _UniffiConverterTypeTxOut(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TxOut(
            value=_UniffiConverterUInt64.read(buf),
            script_pubkey=_UniffiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.value)
        _UniffiConverterSequenceUInt8.check_lower(value.script_pubkey)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.value, buf)
        _UniffiConverterSequenceUInt8.write(value.script_pubkey, buf)





class Network(enum.Enum):
    BITCOIN = 0
    
    TESTNET = 1
    
    SIGNET = 2
    
    REGTEST = 3
    


class _UniffiConverterTypeNetwork(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Network.BITCOIN
        if variant == 2:
            return Network.TESTNET
        if variant == 3:
            return Network.SIGNET
        if variant == 4:
            return Network.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Network.BITCOIN:
            return
        if value == Network.TESTNET:
            return
        if value == Network.SIGNET:
            return
        if value == Network.REGTEST:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Network.BITCOIN:
            buf.write_i32(1)
        if value == Network.TESTNET:
            buf.write_i32(2)
        if value == Network.SIGNET:
            buf.write_i32(3)
        if value == Network.REGTEST:
            buf.write_i32(4)



# PayjoinError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class PayjoinError(Exception):
    pass

_UniffiTempPayjoinError = PayjoinError

class PayjoinError:  # type: ignore
    class InvalidAddress(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.InvalidAddress({})".format(str(self))
    _UniffiTempPayjoinError.InvalidAddress = InvalidAddress # type: ignore
    class InvalidScript(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.InvalidScript({})".format(str(self))
    _UniffiTempPayjoinError.InvalidScript = InvalidScript # type: ignore
    class PsbtParseError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.PsbtParseError({})".format(str(self))
    _UniffiTempPayjoinError.PsbtParseError = PsbtParseError # type: ignore
    class ResponseError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.ResponseError({})".format(str(self))
    _UniffiTempPayjoinError.ResponseError = ResponseError # type: ignore
    class RequestError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.RequestError({})".format(str(self))
    _UniffiTempPayjoinError.RequestError = RequestError # type: ignore
    class SelectionError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.SelectionError({})".format(str(self))
    _UniffiTempPayjoinError.SelectionError = SelectionError # type: ignore
    class CreateRequestError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.CreateRequestError({})".format(str(self))
    _UniffiTempPayjoinError.CreateRequestError = CreateRequestError # type: ignore
    class PjParseError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.PjParseError({})".format(str(self))
    _UniffiTempPayjoinError.PjParseError = PjParseError # type: ignore
    class PjNotSupported(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.PjNotSupported({})".format(str(self))
    _UniffiTempPayjoinError.PjNotSupported = PjNotSupported # type: ignore
    class V2Error(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.V2Error({})".format(str(self))
    _UniffiTempPayjoinError.V2Error = V2Error # type: ignore
    class ValidationError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.ValidationError({})".format(str(self))
    _UniffiTempPayjoinError.ValidationError = ValidationError # type: ignore
    class TransactionError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.TransactionError({})".format(str(self))
    _UniffiTempPayjoinError.TransactionError = TransactionError # type: ignore
    class UnexpectedError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.UnexpectedError({})".format(str(self))
    _UniffiTempPayjoinError.UnexpectedError = UnexpectedError # type: ignore
    class ServerError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.ServerError({})".format(str(self))
    _UniffiTempPayjoinError.ServerError = ServerError # type: ignore
    class NetworkValidation(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.NetworkValidation({})".format(str(self))
    _UniffiTempPayjoinError.NetworkValidation = NetworkValidation # type: ignore
    class OhttpError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.OhttpError({})".format(str(self))
    _UniffiTempPayjoinError.OhttpError = OhttpError # type: ignore
    class UrlError(_UniffiTempPayjoinError):

        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.UrlError({})".format(str(self))
    _UniffiTempPayjoinError.UrlError = UrlError # type: ignore

PayjoinError = _UniffiTempPayjoinError # type: ignore
del _UniffiTempPayjoinError


class _UniffiConverterTypePayjoinError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PayjoinError.InvalidAddress(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 2:
            return PayjoinError.InvalidScript(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 3:
            return PayjoinError.PsbtParseError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 4:
            return PayjoinError.ResponseError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return PayjoinError.RequestError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 6:
            return PayjoinError.SelectionError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 7:
            return PayjoinError.CreateRequestError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 8:
            return PayjoinError.PjParseError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 9:
            return PayjoinError.PjNotSupported(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 10:
            return PayjoinError.V2Error(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 11:
            return PayjoinError.ValidationError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 12:
            return PayjoinError.TransactionError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 13:
            return PayjoinError.UnexpectedError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 14:
            return PayjoinError.ServerError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 15:
            return PayjoinError.NetworkValidation(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 16:
            return PayjoinError.OhttpError(
                message=_UniffiConverterString.read(buf),
            )
        if variant == 17:
            return PayjoinError.UrlError(
                message=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, PayjoinError.InvalidAddress):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.InvalidScript):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.PsbtParseError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.ResponseError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.RequestError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.SelectionError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.CreateRequestError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.PjParseError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.PjNotSupported):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.V2Error):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.ValidationError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.TransactionError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.UnexpectedError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.ServerError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.NetworkValidation):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.OhttpError):
            _UniffiConverterString.check_lower(value.message)
            return
        if isinstance(value, PayjoinError.UrlError):
            _UniffiConverterString.check_lower(value.message)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, PayjoinError.InvalidAddress):
            buf.write_i32(1)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.InvalidScript):
            buf.write_i32(2)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.PsbtParseError):
            buf.write_i32(3)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.ResponseError):
            buf.write_i32(4)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.RequestError):
            buf.write_i32(5)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.SelectionError):
            buf.write_i32(6)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.CreateRequestError):
            buf.write_i32(7)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.PjParseError):
            buf.write_i32(8)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.PjNotSupported):
            buf.write_i32(9)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.V2Error):
            buf.write_i32(10)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.ValidationError):
            buf.write_i32(11)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.TransactionError):
            buf.write_i32(12)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.UnexpectedError):
            buf.write_i32(13)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.ServerError):
            buf.write_i32(14)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.NetworkValidation):
            buf.write_i32(15)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.OhttpError):
            buf.write_i32(16)
            _UniffiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.UrlError):
            buf.write_i32(17)
            _UniffiConverterString.write(value.message, buf)



class CanBroadcast(typing.Protocol):
    def callback(self, tx: "typing.List[int]"):
        raise NotImplementedError
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplCanBroadcast:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_CAN_BROADCAST_METHOD0
    def callback(
            uniffi_handle,
            tx,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCanBroadcast._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceUInt8.lift(tx), )
            method = uniffi_obj.callback
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                PayjoinError,
                _UniffiConverterTypePayjoinError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceCanBroadcast._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceCanBroadcast(
        callback,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_canbroadcast(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceCanBroadcast = UniffiCallbackInterfaceFfiConverter()



class IsOutputKnown(typing.Protocol):
    def callback(self, outpoint: "OutPoint"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplIsOutputKnown:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_IS_OUTPUT_KNOWN_METHOD0
    def callback(
            uniffi_handle,
            outpoint,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceIsOutputKnown._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeOutPoint.lift(outpoint), )
            method = uniffi_obj.callback
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                PayjoinError,
                _UniffiConverterTypePayjoinError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceIsOutputKnown._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceIsOutputKnown(
        callback,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_isoutputknown(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceIsOutputKnown = UniffiCallbackInterfaceFfiConverter()



class IsScriptOwned(typing.Protocol):
    def callback(self, script: "typing.List[int]"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplIsScriptOwned:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_IS_SCRIPT_OWNED_METHOD0
    def callback(
            uniffi_handle,
            script,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceIsScriptOwned._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceUInt8.lift(script), )
            method = uniffi_obj.callback
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                PayjoinError,
                _UniffiConverterTypePayjoinError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceIsScriptOwned._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceIsScriptOwned(
        callback,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_isscriptowned(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceIsScriptOwned = UniffiCallbackInterfaceFfiConverter()



class ProcessPartiallySignedTransaction(typing.Protocol):
    def callback(self, psbt: "str"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplProcessPartiallySignedTransaction:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_PROCESS_PARTIALLY_SIGNED_TRANSACTION_METHOD0
    def callback(
            uniffi_handle,
            psbt,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(psbt), )
            method = uniffi_obj.callback
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                PayjoinError,
                _UniffiConverterTypePayjoinError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceProcessPartiallySignedTransaction(
        callback,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_payjoin_ffi_fn_init_callback_vtable_processpartiallysignedtransaction(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceProcessPartiallySignedTransaction = UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt8.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt8.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt8.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalDouble(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterDouble.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterDouble.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterDouble.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeV2UncheckedProposal(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeV2UncheckedProposal.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeV2UncheckedProposal.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeV2UncheckedProposal.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt8(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt8.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt8.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt64.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt64.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeOutPoint(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeOutPoint.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeOutPoint.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeOutPoint.read(buf) for i in range(count)
        ]



class _UniffiConverterMapUInt64TypeOutPoint(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterUInt64.check_lower(key)
            _UniffiConverterTypeOutPoint.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterUInt64.write(key, buf)
            _UniffiConverterTypeOutPoint.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterUInt64.read(buf)
            val = _UniffiConverterTypeOutPoint.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterString.read(buf)
            d[key] = val
        return d

# Async support

__all__ = [
    "InternalError",
    "Network",
    "PayjoinError",
    "OutPoint",
    "Request",
    "RequestContextV1",
    "RequestContextV2",
    "RequestResponse",
    "TxOut",
    "ClientResponse",
    "ContextV1",
    "ContextV2",
    "Enrolled",
    "Enroller",
    "Headers",
    "MaybeInputsOwned",
    "MaybeInputsSeen",
    "MaybeMixedInputScripts",
    "OhttpKeys",
    "OutputsUnknown",
    "PayjoinProposal",
    "PjUri",
    "ProvisionalProposal",
    "RequestBuilder",
    "RequestContext",
    "UncheckedProposal",
    "Uri",
    "Url",
    "V2MaybeInputsOwned",
    "V2MaybeInputsSeen",
    "V2MaybeMixedInputScripts",
    "V2OutputsUnknown",
    "V2PayjoinProposal",
    "V2ProvisionalProposal",
    "V2UncheckedProposal",
    "CanBroadcast",
    "IsOutputKnown",
    "IsScriptOwned",
    "ProcessPartiallySignedTransaction",
]

